#include "arduino_secrets.h"
/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/a95f93b4-8a3b-48dd-8bb4-127328d51a6f 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float feelTemp;
  float humidity;
  float microphone;
  float temperatures;
  float tempMax;
  float tempMin;
  float windDeg;
  float windSpeed;
  int num_Pepole;
  CloudLocation busLantitude;
  CloudLocation busLongtitude;
  bool lED;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include <Adafruit_Sensor.h>
#include <DHT.h>        // Adafruit DHT Library
#include <driver/i2s.h> // I2S Microphone Library
#include <WiFi.h>       // WiFi library
#include <HTTPClient.h> // HTTP client for API calls
#include <ArduinoJson.h> // Library for JSON parsing

// ======= WiFi Configuration =======
const char* ssid = "Glide_Resident";
const char* password = "DimeSteamAged";

// ======= API Configuration =======
const String apiKey = "01a9b65c4ace1848bd3d7488a4db12f9"; // Replace with your API key
const float latitude = 51.5155; // Replace with your latitude
const float longitude = -0.2233; // Replace with your longitude
const String apiUrl = "http://api.openweathermap.org/data/2.5/weather?lat=" + String(latitude, 6) + "&lon=" + String(longitude, 6) + "&appid=" + apiKey + "&units=metric";

// ======= DHT Sensor Configuration =======
#define DHT_SENSOR_TYPE DHT11
#define DHT_SENSOR_PIN 3 // GPIO for DHT sensor

// ======= I2S Microphone Configuration =======
#define I2S_WS 4    // Word Select (L/R) pin
#define I2S_SD 5    // Serial Data pin
#define I2S_SCK 6   // Serial Clock pin
#define I2S_PORT I2S_NUM_0
#define BUFFER_LEN 100
int16_t soundBuffer[BUFFER_LEN];

DHT dht_sensor(DHT_SENSOR_PIN, DHT_SENSOR_TYPE); // Create DHT object

// Function to connect to WiFi
void connectToWiFi() {
  Serial.print("Connecting to WiFi");
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println(" Connected!");
}

// Function to fetch weather data
void fetchWeatherData() {
  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;
    http.begin(apiUrl);
    int httpCode = http.GET();

    if (httpCode > 0) {
      String payload = http.getString();
      Serial.println("API Response:");
      Serial.println(payload);

      // Parse JSON data
      StaticJsonDocument<1024> doc;
      DeserializationError error = deserializeJson(doc, payload);

      if (!error) {
        tempMin = doc["main"]["temp_min"].as<float>();
        tempMax = doc["main"]["temp_max"].as<float>();
        feelTemp = doc["main"]["feels_like"].as<float>();
        windSpeed = doc["wind"]["speed"].as<float>();
        windDeg = doc["wind"]["deg"].as<float>();

        // Debug output for parsed data
        Serial.println("Parsed Data:");
        Serial.print("Min Temp: ");
        Serial.println(tempMin);
        Serial.print("Max Temp: ");
        Serial.println(tempMax);
        Serial.print("Feels Like Temp: ");
        Serial.println(feelTemp);
        Serial.print("Wind Speed: ");
        Serial.println(windSpeed);
        Serial.print("Wind Direction: ");
        Serial.println(windDeg);
      } else {
        Serial.print("JSON Parsing Error: ");
        Serial.println(error.c_str());
      }
    } else {
      Serial.println("Error in API call: " + String(httpCode));
    }
    http.end();
  } else {
    Serial.println("WiFi Disconnected!");
  }
}

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  delay(1500);

  pinMode(LED_BUILTIN, OUTPUT);

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();

  // Initialize WiFi and API
  connectToWiFi();

  // Initialize I2S Microphone
  const i2s_config_t i2s_config = {
    .mode = (i2s_mode_t)(I2S_MODE_MASTER | I2S_MODE_RX),
    .sample_rate = 44100,
    .bits_per_sample = I2S_BITS_PER_SAMPLE_16BIT,
    .channel_format = I2S_CHANNEL_FMT_ONLY_LEFT,
    .communication_format = I2S_COMM_FORMAT_STAND_I2S,
    .intr_alloc_flags = 0,
    .dma_buf_count = 8,
    .dma_buf_len = BUFFER_LEN,
    .use_apll = false
  };
  i2s_driver_install(I2S_PORT, &i2s_config, 0, NULL);

  const i2s_pin_config_t pin_config = {
    .bck_io_num = I2S_SCK,
    .ws_io_num = I2S_WS,
    .data_out_num = -1,
    .data_in_num = I2S_SD
  };
  i2s_set_pin(I2S_PORT, &pin_config);
  i2s_start(I2S_PORT);
  Serial.println("I2S Microphone Initialized...");
}

float routeLatitudes[] = {51.5155, 51.5160, 51.5170}; // Example route
float routeLongitudes[] = {-0.2233, -0.2240, -0.2250}; // Example route
int currentWaypoint = 0; // Index of the current waypoint

void loop() {
  ArduinoCloud.update();

  // Read sensor data
  temperatures = dht_sensor.readTemperature();
  humidity = dht_sensor.readHumidity();
  microphone = collectI2SData();

  // Fetch weather data periodically (every 30 seconds)
  static unsigned long lastFetch = 0;
  if (millis() - lastFetch >= 30000) {
    fetchWeatherData();
    lastFetch = millis();
  }

  // Predict people count using regression formula
  num_Pepole = round(-9.1263 + (0.5 * microphone) + (0.3339 * temperatures) + (0.1960 * humidity));

  // Debug output
  Serial.print("Temperature: ");
  Serial.print(temperatures);
  Serial.print(" Â°C, Humidity: ");
  Serial.print(humidity);
  Serial.print(" %, Microphone: ");
  Serial.print(microphone);
  Serial.print(", Predicted People Count: ");
  Serial.println(num_Pepole);

  // LED control based on people count threshold
  if (num_Pepole >= 30) {
    digitalWrite(LED_BUILTIN, HIGH); // Turn on LED
    lED = true;
  } else {
    digitalWrite(LED_BUILTIN, LOW); // Turn off LED
    lED = false;
  }

  // Simulate bus location update every 10 seconds
  static unsigned long lastBusUpdate = 0;
  if (millis() - lastBusUpdate >= 10000) {
    updateBusLocation();
    lastBusUpdate = millis();
  }

  delay(2000); // 2 seconds delay
}

float collectI2SData() {
  size_t bytesIn = 0;
  float mean = 0;

  if (i2s_read(I2S_PORT, &soundBuffer, BUFFER_LEN, &bytesIn, portMAX_DELAY) == ESP_OK) {
    int samples = bytesIn / sizeof(int16_t);
    for (int i = 0; i < samples; ++i) {
      mean += abs(soundBuffer[i]);
    }
    mean /= samples; // Calculate average sound level for this batch
  }
  return mean;
}

void updateBusLocation() {
  if (currentWaypoint < (sizeof(routeLatitudes) / sizeof(routeLatitudes[0]))) {
    currentWaypoint++;
  } else {
    currentWaypoint = 0; // Loop back to the start
  }
}

/*
  Since LED is READ_WRITE variable, onLEDChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onLEDChange() {
  digitalWrite(LED_BUILTIN, lED);
}

// Function called when the humidity variable is updated from the IoT Cloud
void onHumidityChange() {
  // You can add custom actions here, e.g., log changes or take actions based on new values
}

// Function called when the microphone variable is updated from the IoT Cloud
void onMicrophoneChange() {
  // You can add custom actions here
}

// Function called when the temperatures variable is updated from the IoT Cloud
void onTemperaturesChange() {
  // You can add custom actions here
}

/*
  Since TempMin is READ_WRITE variable, onTempMinChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onTempMinChange()  {
  // Add your code here to act upon TempMin change
}

/*
  Since TempMax is READ_WRITE variable, onTempMaxChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onTempMaxChange()  {
  // Add your code here to act upon TempMax change
}

/*
  Since FeelTemp is READ_WRITE variable, onFeelTempChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onFeelTempChange()  {
  // Add your code here to act upon FeelTemp change
}

/*
  Since WindSpeed is READ_WRITE variable, onWindSpeedChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onWindSpeedChange()  {
  // Add your code here to act upon WindSpeed change
}

/*
  Since WindDeg is READ_WRITE variable, onWindDegChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onWindDegChange()  {
  // Add your code here to act upon WindDeg change
}


/*
  Since NumPepole is READ_WRITE variable, onNumPepoleChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onNumPepoleChange()  {
  // Add your code here to act upon NumPepole change
}




/*
  Since BusLantitude is READ_WRITE variable, onBusLantitudeChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onBusLantitudeChange()  {
  // Add your code here to act upon BusLantitude change
}

/*
  Since BusLongtitude is READ_WRITE variable, onBusLongtitudeChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onBusLongtitudeChange()  {
  // Add your code here to act upon BusLongtitude change
}







